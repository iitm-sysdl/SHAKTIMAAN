//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Sat May 26 17:55:12 IST 2018
//
//
// Ports:
// Name                         I/O  size props
// slave_systolic_awready         O     1 const
// slave_systolic_wready          O     1 const
// slave_systolic_bvalid          O     1 const
// slave_systolic_bresp           O     2 const
// slave_systolic_bid             O     4 const
// slave_systolic_arready         O     1 const
// slave_systolic_rvalid          O     1 const
// slave_systolic_rresp           O     2 const
// slave_systolic_rdata           O    16 const
// slave_systolic_rlast           O     1 const
// slave_systolic_rid             O     4 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// slave_systolic_m_awvalid_awvalid  I     1 unused
// slave_systolic_m_awvalid_awaddr  I    16 unused
// slave_systolic_m_awvalid_awsize  I     3 unused
// slave_systolic_m_awvalid_awlen  I     8 unused
// slave_systolic_m_awvalid_awburst  I     2 unused
// slave_systolic_m_awvalid_awid  I     4 unused
// slave_systolic_m_wvalid_wvalid  I     1 unused
// slave_systolic_m_wvalid_wdata  I    16 unused
// slave_systolic_m_wvalid_wstrb  I     2 unused
// slave_systolic_m_wvalid_wlast  I     1 unused
// slave_systolic_m_wvalid_wid    I     4 unused
// slave_systolic_m_bready_bready  I     1 unused
// slave_systolic_m_arvalid_arvalid  I     1 unused
// slave_systolic_m_arvalid_araddr  I    16 unused
// slave_systolic_m_arvalid_arsize  I     3 unused
// slave_systolic_m_arvalid_arlen  I     8 unused
// slave_systolic_m_arvalid_arburst  I     2 unused
// slave_systolic_m_arvalid_arid  I     4 unused
// slave_systolic_m_rready_rready  I     1 unused
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mksystolic3(CLK,
		   RST_N,

		   slave_systolic_m_awvalid_awvalid,
		   slave_systolic_m_awvalid_awaddr,
		   slave_systolic_m_awvalid_awsize,
		   slave_systolic_m_awvalid_awlen,
		   slave_systolic_m_awvalid_awburst,
		   slave_systolic_m_awvalid_awid,

		   slave_systolic_awready,

		   slave_systolic_m_wvalid_wvalid,
		   slave_systolic_m_wvalid_wdata,
		   slave_systolic_m_wvalid_wstrb,
		   slave_systolic_m_wvalid_wlast,
		   slave_systolic_m_wvalid_wid,

		   slave_systolic_wready,

		   slave_systolic_bvalid,

		   slave_systolic_bresp,

		   slave_systolic_bid,

		   slave_systolic_m_bready_bready,

		   slave_systolic_m_arvalid_arvalid,
		   slave_systolic_m_arvalid_araddr,
		   slave_systolic_m_arvalid_arsize,
		   slave_systolic_m_arvalid_arlen,
		   slave_systolic_m_arvalid_arburst,
		   slave_systolic_m_arvalid_arid,

		   slave_systolic_arready,

		   slave_systolic_rvalid,

		   slave_systolic_rresp,

		   slave_systolic_rdata,

		   slave_systolic_rlast,

		   slave_systolic_rid,

		   slave_systolic_m_rready_rready);
  input  CLK;
  input  RST_N;

  // action method slave_systolic_m_awvalid
  input  slave_systolic_m_awvalid_awvalid;
  input  [15 : 0] slave_systolic_m_awvalid_awaddr;
  input  [2 : 0] slave_systolic_m_awvalid_awsize;
  input  [7 : 0] slave_systolic_m_awvalid_awlen;
  input  [1 : 0] slave_systolic_m_awvalid_awburst;
  input  [3 : 0] slave_systolic_m_awvalid_awid;

  // value method slave_systolic_m_awready
  output slave_systolic_awready;

  // action method slave_systolic_m_wvalid
  input  slave_systolic_m_wvalid_wvalid;
  input  [15 : 0] slave_systolic_m_wvalid_wdata;
  input  [1 : 0] slave_systolic_m_wvalid_wstrb;
  input  slave_systolic_m_wvalid_wlast;
  input  [3 : 0] slave_systolic_m_wvalid_wid;

  // value method slave_systolic_m_wready
  output slave_systolic_wready;

  // value method slave_systolic_m_bvalid
  output slave_systolic_bvalid;

  // value method slave_systolic_m_bresp
  output [1 : 0] slave_systolic_bresp;

  // value method slave_systolic_m_buser

  // value method slave_systolic_m_bid
  output [3 : 0] slave_systolic_bid;

  // action method slave_systolic_m_bready
  input  slave_systolic_m_bready_bready;

  // action method slave_systolic_m_arvalid
  input  slave_systolic_m_arvalid_arvalid;
  input  [15 : 0] slave_systolic_m_arvalid_araddr;
  input  [2 : 0] slave_systolic_m_arvalid_arsize;
  input  [7 : 0] slave_systolic_m_arvalid_arlen;
  input  [1 : 0] slave_systolic_m_arvalid_arburst;
  input  [3 : 0] slave_systolic_m_arvalid_arid;

  // value method slave_systolic_m_arready
  output slave_systolic_arready;

  // value method slave_systolic_m_rvalid
  output slave_systolic_rvalid;

  // value method slave_systolic_m_rresp
  output [1 : 0] slave_systolic_rresp;

  // value method slave_systolic_m_rdata
  output [15 : 0] slave_systolic_rdata;

  // value method slave_systolic_m_rlast
  output slave_systolic_rlast;

  // value method slave_systolic_m_ruser

  // value method slave_systolic_m_rid
  output [3 : 0] slave_systolic_rid;

  // action method slave_systolic_m_rready
  input  slave_systolic_m_rready_rready;

  // signals for module outputs
  wire [15 : 0] slave_systolic_rdata;
  wire [3 : 0] slave_systolic_bid, slave_systolic_rid;
  wire [1 : 0] slave_systolic_bresp, slave_systolic_rresp;
  wire slave_systolic_arready,
       slave_systolic_awready,
       slave_systolic_bvalid,
       slave_systolic_rlast,
       slave_systolic_rvalid,
       slave_systolic_wready;

  // ports of submodule inst_colBuf_0
  wire [17 : 0] inst_colBuf_0$D_IN, inst_colBuf_0$D_OUT;
  wire inst_colBuf_0$CLR,
       inst_colBuf_0$DEQ,
       inst_colBuf_0$EMPTY_N,
       inst_colBuf_0$ENQ;

  // ports of submodule inst_colBuf_1
  wire [17 : 0] inst_colBuf_1$D_IN, inst_colBuf_1$D_OUT;
  wire inst_colBuf_1$CLR,
       inst_colBuf_1$DEQ,
       inst_colBuf_1$EMPTY_N,
       inst_colBuf_1$ENQ;

  // ports of submodule inst_colBuf_2
  wire [17 : 0] inst_colBuf_2$D_IN, inst_colBuf_2$D_OUT;
  wire inst_colBuf_2$CLR,
       inst_colBuf_2$DEQ,
       inst_colBuf_2$EMPTY_N,
       inst_colBuf_2$ENQ;

  // ports of submodule inst_intArray_0_0
  wire [18 : 0] inst_intArray_0_0$from_north_put,
		inst_intArray_0_0$to_south_get;
  wire [16 : 0] inst_intArray_0_0$from_west_put,
		inst_intArray_0_0$to_east_get;
  wire inst_intArray_0_0$EN_acc_output,
       inst_intArray_0_0$EN_from_north_put,
       inst_intArray_0_0$EN_from_west_put,
       inst_intArray_0_0$EN_to_east_get,
       inst_intArray_0_0$EN_to_south_get;

  // ports of submodule inst_intArray_0_1
  wire [18 : 0] inst_intArray_0_1$from_north_put,
		inst_intArray_0_1$to_south_get;
  wire [16 : 0] inst_intArray_0_1$from_west_put,
		inst_intArray_0_1$to_east_get;
  wire inst_intArray_0_1$EN_acc_output,
       inst_intArray_0_1$EN_from_north_put,
       inst_intArray_0_1$EN_from_west_put,
       inst_intArray_0_1$EN_to_east_get,
       inst_intArray_0_1$EN_to_south_get;

  // ports of submodule inst_intArray_0_2
  wire [18 : 0] inst_intArray_0_2$from_north_put,
		inst_intArray_0_2$to_south_get;
  wire [16 : 0] inst_intArray_0_2$from_west_put;
  wire inst_intArray_0_2$EN_acc_output,
       inst_intArray_0_2$EN_from_north_put,
       inst_intArray_0_2$EN_from_west_put,
       inst_intArray_0_2$EN_to_east_get,
       inst_intArray_0_2$EN_to_south_get;

  // ports of submodule inst_intArray_1_0
  wire [18 : 0] inst_intArray_1_0$from_north_put,
		inst_intArray_1_0$to_south_get;
  wire [16 : 0] inst_intArray_1_0$from_west_put,
		inst_intArray_1_0$to_east_get;
  wire inst_intArray_1_0$EN_acc_output,
       inst_intArray_1_0$EN_from_north_put,
       inst_intArray_1_0$EN_from_west_put,
       inst_intArray_1_0$EN_to_east_get,
       inst_intArray_1_0$EN_to_south_get;

  // ports of submodule inst_intArray_1_1
  wire [18 : 0] inst_intArray_1_1$from_north_put,
		inst_intArray_1_1$to_south_get;
  wire [16 : 0] inst_intArray_1_1$from_west_put,
		inst_intArray_1_1$to_east_get;
  wire inst_intArray_1_1$EN_acc_output,
       inst_intArray_1_1$EN_from_north_put,
       inst_intArray_1_1$EN_from_west_put,
       inst_intArray_1_1$EN_to_east_get,
       inst_intArray_1_1$EN_to_south_get;

  // ports of submodule inst_intArray_1_2
  wire [18 : 0] inst_intArray_1_2$from_north_put,
		inst_intArray_1_2$to_south_get;
  wire [16 : 0] inst_intArray_1_2$from_west_put;
  wire inst_intArray_1_2$EN_acc_output,
       inst_intArray_1_2$EN_from_north_put,
       inst_intArray_1_2$EN_from_west_put,
       inst_intArray_1_2$EN_to_east_get,
       inst_intArray_1_2$EN_to_south_get;

  // ports of submodule inst_intArray_2_0
  wire [18 : 0] inst_intArray_2_0$from_north_put;
  wire [16 : 0] inst_intArray_2_0$from_west_put,
		inst_intArray_2_0$to_east_get;
  wire inst_intArray_2_0$EN_acc_output,
       inst_intArray_2_0$EN_from_north_put,
       inst_intArray_2_0$EN_from_west_put,
       inst_intArray_2_0$EN_to_east_get,
       inst_intArray_2_0$EN_to_south_get;

  // ports of submodule inst_intArray_2_1
  wire [18 : 0] inst_intArray_2_1$from_north_put;
  wire [16 : 0] inst_intArray_2_1$from_west_put,
		inst_intArray_2_1$to_east_get;
  wire inst_intArray_2_1$EN_acc_output,
       inst_intArray_2_1$EN_from_north_put,
       inst_intArray_2_1$EN_from_west_put,
       inst_intArray_2_1$EN_to_east_get,
       inst_intArray_2_1$EN_to_south_get;

  // ports of submodule inst_intArray_2_2
  wire [18 : 0] inst_intArray_2_2$from_north_put;
  wire [16 : 0] inst_intArray_2_2$from_west_put;
  wire inst_intArray_2_2$EN_acc_output,
       inst_intArray_2_2$EN_from_north_put,
       inst_intArray_2_2$EN_from_west_put,
       inst_intArray_2_2$EN_to_east_get,
       inst_intArray_2_2$EN_to_south_get;

  // ports of submodule inst_rowBuf_0
  wire [15 : 0] inst_rowBuf_0$D_IN, inst_rowBuf_0$D_OUT;
  wire inst_rowBuf_0$CLR,
       inst_rowBuf_0$DEQ,
       inst_rowBuf_0$EMPTY_N,
       inst_rowBuf_0$ENQ;

  // ports of submodule inst_rowBuf_1
  wire [15 : 0] inst_rowBuf_1$D_IN, inst_rowBuf_1$D_OUT;
  wire inst_rowBuf_1$CLR,
       inst_rowBuf_1$DEQ,
       inst_rowBuf_1$EMPTY_N,
       inst_rowBuf_1$ENQ;

  // ports of submodule inst_rowBuf_2
  wire [15 : 0] inst_rowBuf_2$D_IN, inst_rowBuf_2$D_OUT;
  wire inst_rowBuf_2$CLR,
       inst_rowBuf_2$DEQ,
       inst_rowBuf_2$EMPTY_N,
       inst_rowBuf_2$ENQ;

  // ports of submodule inst_s_xactor_f_rd_addr
  wire [32 : 0] inst_s_xactor_f_rd_addr$D_IN;
  wire inst_s_xactor_f_rd_addr$CLR,
       inst_s_xactor_f_rd_addr$DEQ,
       inst_s_xactor_f_rd_addr$ENQ;

  // ports of submodule inst_s_xactor_f_rd_data
  wire [22 : 0] inst_s_xactor_f_rd_data$D_IN;
  wire inst_s_xactor_f_rd_data$CLR,
       inst_s_xactor_f_rd_data$DEQ,
       inst_s_xactor_f_rd_data$ENQ;

  // ports of submodule inst_s_xactor_f_wr_addr
  wire [32 : 0] inst_s_xactor_f_wr_addr$D_IN;
  wire inst_s_xactor_f_wr_addr$CLR,
       inst_s_xactor_f_wr_addr$DEQ,
       inst_s_xactor_f_wr_addr$ENQ;

  // ports of submodule inst_s_xactor_f_wr_data
  wire [22 : 0] inst_s_xactor_f_wr_data$D_IN;
  wire inst_s_xactor_f_wr_data$CLR,
       inst_s_xactor_f_wr_data$DEQ,
       inst_s_xactor_f_wr_data$ENQ;

  // ports of submodule inst_s_xactor_f_wr_resp
  wire [5 : 0] inst_s_xactor_f_wr_resp$D_IN;
  wire inst_s_xactor_f_wr_resp$CLR,
       inst_s_xactor_f_wr_resp$DEQ,
       inst_s_xactor_f_wr_resp$ENQ;

  // value method slave_systolic_m_awready
  assign slave_systolic_awready = 1'h0 ;

  // value method slave_systolic_m_wready
  assign slave_systolic_wready = 1'h0 ;

  // value method slave_systolic_m_bvalid
  assign slave_systolic_bvalid = 1'h0 ;

  // value method slave_systolic_m_bresp
  assign slave_systolic_bresp = 2'h2 ;

  // value method slave_systolic_m_bid
  assign slave_systolic_bid = 4'hA ;

  // value method slave_systolic_m_arready
  assign slave_systolic_arready = 1'h0 ;

  // value method slave_systolic_m_rvalid
  assign slave_systolic_rvalid = 1'h0 ;

  // value method slave_systolic_m_rresp
  assign slave_systolic_rresp = 2'h2 ;

  // value method slave_systolic_m_rdata
  assign slave_systolic_rdata = 16'hAAAA ;

  // value method slave_systolic_m_rlast
  assign slave_systolic_rlast = 1'h0 ;

  // value method slave_systolic_m_rid
  assign slave_systolic_rid = 4'hA ;

  // submodule inst_colBuf_0
  FIFO2 #(.width(32'd18), .guarded(32'd1)) inst_colBuf_0(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(inst_colBuf_0$D_IN),
							 .ENQ(inst_colBuf_0$ENQ),
							 .DEQ(inst_colBuf_0$DEQ),
							 .CLR(inst_colBuf_0$CLR),
							 .D_OUT(inst_colBuf_0$D_OUT),
							 .FULL_N(),
							 .EMPTY_N(inst_colBuf_0$EMPTY_N));

  // submodule inst_colBuf_1
  FIFO2 #(.width(32'd18), .guarded(32'd1)) inst_colBuf_1(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(inst_colBuf_1$D_IN),
							 .ENQ(inst_colBuf_1$ENQ),
							 .DEQ(inst_colBuf_1$DEQ),
							 .CLR(inst_colBuf_1$CLR),
							 .D_OUT(inst_colBuf_1$D_OUT),
							 .FULL_N(),
							 .EMPTY_N(inst_colBuf_1$EMPTY_N));

  // submodule inst_colBuf_2
  FIFO2 #(.width(32'd18), .guarded(32'd1)) inst_colBuf_2(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(inst_colBuf_2$D_IN),
							 .ENQ(inst_colBuf_2$ENQ),
							 .DEQ(inst_colBuf_2$DEQ),
							 .CLR(inst_colBuf_2$CLR),
							 .D_OUT(inst_colBuf_2$D_OUT),
							 .FULL_N(),
							 .EMPTY_N(inst_colBuf_2$EMPTY_N));

  // submodule inst_intArray_0_0
  mkintMul inst_intArray_0_0(.row(8'd0),
			     .col(8'd0),
			     .CLK(CLK),
			     .RST_N(RST_N),
			     .from_north_put(inst_intArray_0_0$from_north_put),
			     .from_west_put(inst_intArray_0_0$from_west_put),
			     .EN_from_north_put(inst_intArray_0_0$EN_from_north_put),
			     .EN_from_west_put(inst_intArray_0_0$EN_from_west_put),
			     .EN_to_south_get(inst_intArray_0_0$EN_to_south_get),
			     .EN_to_east_get(inst_intArray_0_0$EN_to_east_get),
			     .EN_acc_output(inst_intArray_0_0$EN_acc_output),
			     .RDY_from_north_put(),
			     .RDY_from_west_put(),
			     .to_south_get(inst_intArray_0_0$to_south_get),
			     .RDY_to_south_get(),
			     .to_east_get(inst_intArray_0_0$to_east_get),
			     .RDY_to_east_get(),
			     .acc_output(),
			     .RDY_acc_output());

  // submodule inst_intArray_0_1
  mkintMul inst_intArray_0_1(.row(8'd0),
			     .col(8'd1),
			     .CLK(CLK),
			     .RST_N(RST_N),
			     .from_north_put(inst_intArray_0_1$from_north_put),
			     .from_west_put(inst_intArray_0_1$from_west_put),
			     .EN_from_north_put(inst_intArray_0_1$EN_from_north_put),
			     .EN_from_west_put(inst_intArray_0_1$EN_from_west_put),
			     .EN_to_south_get(inst_intArray_0_1$EN_to_south_get),
			     .EN_to_east_get(inst_intArray_0_1$EN_to_east_get),
			     .EN_acc_output(inst_intArray_0_1$EN_acc_output),
			     .RDY_from_north_put(),
			     .RDY_from_west_put(),
			     .to_south_get(inst_intArray_0_1$to_south_get),
			     .RDY_to_south_get(),
			     .to_east_get(inst_intArray_0_1$to_east_get),
			     .RDY_to_east_get(),
			     .acc_output(),
			     .RDY_acc_output());

  // submodule inst_intArray_0_2
  mkintMul inst_intArray_0_2(.row(8'd0),
			     .col(8'd2),
			     .CLK(CLK),
			     .RST_N(RST_N),
			     .from_north_put(inst_intArray_0_2$from_north_put),
			     .from_west_put(inst_intArray_0_2$from_west_put),
			     .EN_from_north_put(inst_intArray_0_2$EN_from_north_put),
			     .EN_from_west_put(inst_intArray_0_2$EN_from_west_put),
			     .EN_to_south_get(inst_intArray_0_2$EN_to_south_get),
			     .EN_to_east_get(inst_intArray_0_2$EN_to_east_get),
			     .EN_acc_output(inst_intArray_0_2$EN_acc_output),
			     .RDY_from_north_put(),
			     .RDY_from_west_put(),
			     .to_south_get(inst_intArray_0_2$to_south_get),
			     .RDY_to_south_get(),
			     .to_east_get(),
			     .RDY_to_east_get(),
			     .acc_output(),
			     .RDY_acc_output());

  // submodule inst_intArray_1_0
  mkintMul inst_intArray_1_0(.row(8'd1),
			     .col(8'd0),
			     .CLK(CLK),
			     .RST_N(RST_N),
			     .from_north_put(inst_intArray_1_0$from_north_put),
			     .from_west_put(inst_intArray_1_0$from_west_put),
			     .EN_from_north_put(inst_intArray_1_0$EN_from_north_put),
			     .EN_from_west_put(inst_intArray_1_0$EN_from_west_put),
			     .EN_to_south_get(inst_intArray_1_0$EN_to_south_get),
			     .EN_to_east_get(inst_intArray_1_0$EN_to_east_get),
			     .EN_acc_output(inst_intArray_1_0$EN_acc_output),
			     .RDY_from_north_put(),
			     .RDY_from_west_put(),
			     .to_south_get(inst_intArray_1_0$to_south_get),
			     .RDY_to_south_get(),
			     .to_east_get(inst_intArray_1_0$to_east_get),
			     .RDY_to_east_get(),
			     .acc_output(),
			     .RDY_acc_output());

  // submodule inst_intArray_1_1
  mkintMul inst_intArray_1_1(.row(8'd1),
			     .col(8'd1),
			     .CLK(CLK),
			     .RST_N(RST_N),
			     .from_north_put(inst_intArray_1_1$from_north_put),
			     .from_west_put(inst_intArray_1_1$from_west_put),
			     .EN_from_north_put(inst_intArray_1_1$EN_from_north_put),
			     .EN_from_west_put(inst_intArray_1_1$EN_from_west_put),
			     .EN_to_south_get(inst_intArray_1_1$EN_to_south_get),
			     .EN_to_east_get(inst_intArray_1_1$EN_to_east_get),
			     .EN_acc_output(inst_intArray_1_1$EN_acc_output),
			     .RDY_from_north_put(),
			     .RDY_from_west_put(),
			     .to_south_get(inst_intArray_1_1$to_south_get),
			     .RDY_to_south_get(),
			     .to_east_get(inst_intArray_1_1$to_east_get),
			     .RDY_to_east_get(),
			     .acc_output(),
			     .RDY_acc_output());

  // submodule inst_intArray_1_2
  mkintMul inst_intArray_1_2(.row(8'd1),
			     .col(8'd2),
			     .CLK(CLK),
			     .RST_N(RST_N),
			     .from_north_put(inst_intArray_1_2$from_north_put),
			     .from_west_put(inst_intArray_1_2$from_west_put),
			     .EN_from_north_put(inst_intArray_1_2$EN_from_north_put),
			     .EN_from_west_put(inst_intArray_1_2$EN_from_west_put),
			     .EN_to_south_get(inst_intArray_1_2$EN_to_south_get),
			     .EN_to_east_get(inst_intArray_1_2$EN_to_east_get),
			     .EN_acc_output(inst_intArray_1_2$EN_acc_output),
			     .RDY_from_north_put(),
			     .RDY_from_west_put(),
			     .to_south_get(inst_intArray_1_2$to_south_get),
			     .RDY_to_south_get(),
			     .to_east_get(),
			     .RDY_to_east_get(),
			     .acc_output(),
			     .RDY_acc_output());

  // submodule inst_intArray_2_0
  mkintMul inst_intArray_2_0(.row(8'd2),
			     .col(8'd0),
			     .CLK(CLK),
			     .RST_N(RST_N),
			     .from_north_put(inst_intArray_2_0$from_north_put),
			     .from_west_put(inst_intArray_2_0$from_west_put),
			     .EN_from_north_put(inst_intArray_2_0$EN_from_north_put),
			     .EN_from_west_put(inst_intArray_2_0$EN_from_west_put),
			     .EN_to_south_get(inst_intArray_2_0$EN_to_south_get),
			     .EN_to_east_get(inst_intArray_2_0$EN_to_east_get),
			     .EN_acc_output(inst_intArray_2_0$EN_acc_output),
			     .RDY_from_north_put(),
			     .RDY_from_west_put(),
			     .to_south_get(),
			     .RDY_to_south_get(),
			     .to_east_get(inst_intArray_2_0$to_east_get),
			     .RDY_to_east_get(),
			     .acc_output(),
			     .RDY_acc_output());

  // submodule inst_intArray_2_1
  mkintMul inst_intArray_2_1(.row(8'd2),
			     .col(8'd1),
			     .CLK(CLK),
			     .RST_N(RST_N),
			     .from_north_put(inst_intArray_2_1$from_north_put),
			     .from_west_put(inst_intArray_2_1$from_west_put),
			     .EN_from_north_put(inst_intArray_2_1$EN_from_north_put),
			     .EN_from_west_put(inst_intArray_2_1$EN_from_west_put),
			     .EN_to_south_get(inst_intArray_2_1$EN_to_south_get),
			     .EN_to_east_get(inst_intArray_2_1$EN_to_east_get),
			     .EN_acc_output(inst_intArray_2_1$EN_acc_output),
			     .RDY_from_north_put(),
			     .RDY_from_west_put(),
			     .to_south_get(),
			     .RDY_to_south_get(),
			     .to_east_get(inst_intArray_2_1$to_east_get),
			     .RDY_to_east_get(),
			     .acc_output(),
			     .RDY_acc_output());

  // submodule inst_intArray_2_2
  mkintMul inst_intArray_2_2(.row(8'd2),
			     .col(8'd2),
			     .CLK(CLK),
			     .RST_N(RST_N),
			     .from_north_put(inst_intArray_2_2$from_north_put),
			     .from_west_put(inst_intArray_2_2$from_west_put),
			     .EN_from_north_put(inst_intArray_2_2$EN_from_north_put),
			     .EN_from_west_put(inst_intArray_2_2$EN_from_west_put),
			     .EN_to_south_get(inst_intArray_2_2$EN_to_south_get),
			     .EN_to_east_get(inst_intArray_2_2$EN_to_east_get),
			     .EN_acc_output(inst_intArray_2_2$EN_acc_output),
			     .RDY_from_north_put(),
			     .RDY_from_west_put(),
			     .to_south_get(),
			     .RDY_to_south_get(),
			     .to_east_get(),
			     .RDY_to_east_get(),
			     .acc_output(),
			     .RDY_acc_output());

  // submodule inst_rowBuf_0
  FIFO2 #(.width(32'd16), .guarded(32'd1)) inst_rowBuf_0(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(inst_rowBuf_0$D_IN),
							 .ENQ(inst_rowBuf_0$ENQ),
							 .DEQ(inst_rowBuf_0$DEQ),
							 .CLR(inst_rowBuf_0$CLR),
							 .D_OUT(inst_rowBuf_0$D_OUT),
							 .FULL_N(),
							 .EMPTY_N(inst_rowBuf_0$EMPTY_N));

  // submodule inst_rowBuf_1
  FIFO2 #(.width(32'd16), .guarded(32'd1)) inst_rowBuf_1(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(inst_rowBuf_1$D_IN),
							 .ENQ(inst_rowBuf_1$ENQ),
							 .DEQ(inst_rowBuf_1$DEQ),
							 .CLR(inst_rowBuf_1$CLR),
							 .D_OUT(inst_rowBuf_1$D_OUT),
							 .FULL_N(),
							 .EMPTY_N(inst_rowBuf_1$EMPTY_N));

  // submodule inst_rowBuf_2
  FIFO2 #(.width(32'd16), .guarded(32'd1)) inst_rowBuf_2(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(inst_rowBuf_2$D_IN),
							 .ENQ(inst_rowBuf_2$ENQ),
							 .DEQ(inst_rowBuf_2$DEQ),
							 .CLR(inst_rowBuf_2$CLR),
							 .D_OUT(inst_rowBuf_2$D_OUT),
							 .FULL_N(),
							 .EMPTY_N(inst_rowBuf_2$EMPTY_N));

  // submodule inst_s_xactor_f_rd_addr
  FIFO2 #(.width(32'd33),
	  .guarded(32'd1)) inst_s_xactor_f_rd_addr(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(inst_s_xactor_f_rd_addr$D_IN),
						   .ENQ(inst_s_xactor_f_rd_addr$ENQ),
						   .DEQ(inst_s_xactor_f_rd_addr$DEQ),
						   .CLR(inst_s_xactor_f_rd_addr$CLR),
						   .D_OUT(),
						   .FULL_N(),
						   .EMPTY_N());

  // submodule inst_s_xactor_f_rd_data
  FIFO2 #(.width(32'd23),
	  .guarded(32'd1)) inst_s_xactor_f_rd_data(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(inst_s_xactor_f_rd_data$D_IN),
						   .ENQ(inst_s_xactor_f_rd_data$ENQ),
						   .DEQ(inst_s_xactor_f_rd_data$DEQ),
						   .CLR(inst_s_xactor_f_rd_data$CLR),
						   .D_OUT(),
						   .FULL_N(),
						   .EMPTY_N());

  // submodule inst_s_xactor_f_wr_addr
  FIFO2 #(.width(32'd33),
	  .guarded(32'd1)) inst_s_xactor_f_wr_addr(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(inst_s_xactor_f_wr_addr$D_IN),
						   .ENQ(inst_s_xactor_f_wr_addr$ENQ),
						   .DEQ(inst_s_xactor_f_wr_addr$DEQ),
						   .CLR(inst_s_xactor_f_wr_addr$CLR),
						   .D_OUT(),
						   .FULL_N(),
						   .EMPTY_N());

  // submodule inst_s_xactor_f_wr_data
  FIFO2 #(.width(32'd23),
	  .guarded(32'd1)) inst_s_xactor_f_wr_data(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(inst_s_xactor_f_wr_data$D_IN),
						   .ENQ(inst_s_xactor_f_wr_data$ENQ),
						   .DEQ(inst_s_xactor_f_wr_data$DEQ),
						   .CLR(inst_s_xactor_f_wr_data$CLR),
						   .D_OUT(),
						   .FULL_N(),
						   .EMPTY_N());

  // submodule inst_s_xactor_f_wr_resp
  FIFO2 #(.width(32'd6), .guarded(32'd1)) inst_s_xactor_f_wr_resp(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(inst_s_xactor_f_wr_resp$D_IN),
								  .ENQ(inst_s_xactor_f_wr_resp$ENQ),
								  .DEQ(inst_s_xactor_f_wr_resp$DEQ),
								  .CLR(inst_s_xactor_f_wr_resp$CLR),
								  .D_OUT(),
								  .FULL_N(),
								  .EMPTY_N());

  // submodule inst_colBuf_0
  assign inst_colBuf_0$D_IN = 18'h0 ;
  assign inst_colBuf_0$ENQ = 1'b0 ;
  assign inst_colBuf_0$DEQ = inst_colBuf_0$EMPTY_N ;
  assign inst_colBuf_0$CLR = 1'b0 ;

  // submodule inst_colBuf_1
  assign inst_colBuf_1$D_IN = 18'h0 ;
  assign inst_colBuf_1$ENQ = 1'b0 ;
  assign inst_colBuf_1$DEQ = inst_colBuf_1$EMPTY_N ;
  assign inst_colBuf_1$CLR = 1'b0 ;

  // submodule inst_colBuf_2
  assign inst_colBuf_2$D_IN = 18'h0 ;
  assign inst_colBuf_2$ENQ = 1'b0 ;
  assign inst_colBuf_2$DEQ = inst_colBuf_2$EMPTY_N ;
  assign inst_colBuf_2$CLR = 1'b0 ;

  // submodule inst_intArray_0_0
  assign inst_intArray_0_0$from_north_put = { 1'd1, inst_colBuf_0$D_OUT } ;
  assign inst_intArray_0_0$from_west_put = { 1'd1, inst_rowBuf_0$D_OUT } ;
  assign inst_intArray_0_0$EN_from_north_put = inst_colBuf_0$EMPTY_N ;
  assign inst_intArray_0_0$EN_from_west_put = inst_rowBuf_0$EMPTY_N ;
  assign inst_intArray_0_0$EN_to_south_get = 1'd1 ;
  assign inst_intArray_0_0$EN_to_east_get = 1'd1 ;
  assign inst_intArray_0_0$EN_acc_output = 1'b0 ;

  // submodule inst_intArray_0_1
  assign inst_intArray_0_1$from_north_put = { 1'd1, inst_colBuf_1$D_OUT } ;
  assign inst_intArray_0_1$from_west_put =
	     { inst_intArray_0_0$to_east_get[16],
	       inst_intArray_0_0$to_east_get[16] ?
		 inst_intArray_0_0$to_east_get[15:0] :
		 16'hAAAA } ;
  assign inst_intArray_0_1$EN_from_north_put = inst_colBuf_1$EMPTY_N ;
  assign inst_intArray_0_1$EN_from_west_put = 1'd1 ;
  assign inst_intArray_0_1$EN_to_south_get = 1'd1 ;
  assign inst_intArray_0_1$EN_to_east_get = 1'd1 ;
  assign inst_intArray_0_1$EN_acc_output = 1'b0 ;

  // submodule inst_intArray_0_2
  assign inst_intArray_0_2$from_north_put = { 1'd1, inst_colBuf_2$D_OUT } ;
  assign inst_intArray_0_2$from_west_put =
	     { inst_intArray_0_1$to_east_get[16],
	       inst_intArray_0_1$to_east_get[16] ?
		 inst_intArray_0_1$to_east_get[15:0] :
		 16'hAAAA } ;
  assign inst_intArray_0_2$EN_from_north_put = inst_colBuf_2$EMPTY_N ;
  assign inst_intArray_0_2$EN_from_west_put = 1'd1 ;
  assign inst_intArray_0_2$EN_to_south_get = 1'd1 ;
  assign inst_intArray_0_2$EN_to_east_get = 1'b0 ;
  assign inst_intArray_0_2$EN_acc_output = 1'b0 ;

  // submodule inst_intArray_1_0
  assign inst_intArray_1_0$from_north_put =
	     { inst_intArray_0_0$to_south_get[18],
	       inst_intArray_0_0$to_south_get[18] ?
		 inst_intArray_0_0$to_south_get[17:0] :
		 18'h2AAAA } ;
  assign inst_intArray_1_0$from_west_put = { 1'd1, inst_rowBuf_1$D_OUT } ;
  assign inst_intArray_1_0$EN_from_north_put = 1'd1 ;
  assign inst_intArray_1_0$EN_from_west_put = inst_rowBuf_1$EMPTY_N ;
  assign inst_intArray_1_0$EN_to_south_get = 1'd1 ;
  assign inst_intArray_1_0$EN_to_east_get = 1'd1 ;
  assign inst_intArray_1_0$EN_acc_output = 1'b0 ;

  // submodule inst_intArray_1_1
  assign inst_intArray_1_1$from_north_put =
	     { inst_intArray_0_1$to_south_get[18],
	       inst_intArray_0_1$to_south_get[18] ?
		 inst_intArray_0_1$to_south_get[17:0] :
		 18'h2AAAA } ;
  assign inst_intArray_1_1$from_west_put =
	     { inst_intArray_1_0$to_east_get[16],
	       inst_intArray_1_0$to_east_get[16] ?
		 inst_intArray_1_0$to_east_get[15:0] :
		 16'hAAAA } ;
  assign inst_intArray_1_1$EN_from_north_put = 1'd1 ;
  assign inst_intArray_1_1$EN_from_west_put = 1'd1 ;
  assign inst_intArray_1_1$EN_to_south_get = 1'd1 ;
  assign inst_intArray_1_1$EN_to_east_get = 1'd1 ;
  assign inst_intArray_1_1$EN_acc_output = 1'b0 ;

  // submodule inst_intArray_1_2
  assign inst_intArray_1_2$from_north_put =
	     { inst_intArray_0_2$to_south_get[18],
	       inst_intArray_0_2$to_south_get[18] ?
		 inst_intArray_0_2$to_south_get[17:0] :
		 18'h2AAAA } ;
  assign inst_intArray_1_2$from_west_put =
	     { inst_intArray_1_1$to_east_get[16],
	       inst_intArray_1_1$to_east_get[16] ?
		 inst_intArray_1_1$to_east_get[15:0] :
		 16'hAAAA } ;
  assign inst_intArray_1_2$EN_from_north_put = 1'd1 ;
  assign inst_intArray_1_2$EN_from_west_put = 1'd1 ;
  assign inst_intArray_1_2$EN_to_south_get = 1'd1 ;
  assign inst_intArray_1_2$EN_to_east_get = 1'b0 ;
  assign inst_intArray_1_2$EN_acc_output = 1'b0 ;

  // submodule inst_intArray_2_0
  assign inst_intArray_2_0$from_north_put =
	     { inst_intArray_1_0$to_south_get[18],
	       inst_intArray_1_0$to_south_get[18] ?
		 inst_intArray_1_0$to_south_get[17:0] :
		 18'h2AAAA } ;
  assign inst_intArray_2_0$from_west_put = { 1'd1, inst_rowBuf_2$D_OUT } ;
  assign inst_intArray_2_0$EN_from_north_put = 1'd1 ;
  assign inst_intArray_2_0$EN_from_west_put = inst_rowBuf_2$EMPTY_N ;
  assign inst_intArray_2_0$EN_to_south_get = 1'b0 ;
  assign inst_intArray_2_0$EN_to_east_get = 1'd1 ;
  assign inst_intArray_2_0$EN_acc_output = 1'b0 ;

  // submodule inst_intArray_2_1
  assign inst_intArray_2_1$from_north_put =
	     { inst_intArray_1_1$to_south_get[18],
	       inst_intArray_1_1$to_south_get[18] ?
		 inst_intArray_1_1$to_south_get[17:0] :
		 18'h2AAAA } ;
  assign inst_intArray_2_1$from_west_put =
	     { inst_intArray_2_0$to_east_get[16],
	       inst_intArray_2_0$to_east_get[16] ?
		 inst_intArray_2_0$to_east_get[15:0] :
		 16'hAAAA } ;
  assign inst_intArray_2_1$EN_from_north_put = 1'd1 ;
  assign inst_intArray_2_1$EN_from_west_put = 1'd1 ;
  assign inst_intArray_2_1$EN_to_south_get = 1'b0 ;
  assign inst_intArray_2_1$EN_to_east_get = 1'd1 ;
  assign inst_intArray_2_1$EN_acc_output = 1'b0 ;

  // submodule inst_intArray_2_2
  assign inst_intArray_2_2$from_north_put =
	     { inst_intArray_1_2$to_south_get[18],
	       inst_intArray_1_2$to_south_get[18] ?
		 inst_intArray_1_2$to_south_get[17:0] :
		 18'h2AAAA } ;
  assign inst_intArray_2_2$from_west_put =
	     { inst_intArray_2_1$to_east_get[16],
	       inst_intArray_2_1$to_east_get[16] ?
		 inst_intArray_2_1$to_east_get[15:0] :
		 16'hAAAA } ;
  assign inst_intArray_2_2$EN_from_north_put = 1'd1 ;
  assign inst_intArray_2_2$EN_from_west_put = 1'd1 ;
  assign inst_intArray_2_2$EN_to_south_get = 1'b0 ;
  assign inst_intArray_2_2$EN_to_east_get = 1'b0 ;
  assign inst_intArray_2_2$EN_acc_output = 1'b0 ;

  // submodule inst_rowBuf_0
  assign inst_rowBuf_0$D_IN = 16'h0 ;
  assign inst_rowBuf_0$ENQ = 1'b0 ;
  assign inst_rowBuf_0$DEQ = inst_rowBuf_0$EMPTY_N ;
  assign inst_rowBuf_0$CLR = 1'b0 ;

  // submodule inst_rowBuf_1
  assign inst_rowBuf_1$D_IN = 16'h0 ;
  assign inst_rowBuf_1$ENQ = 1'b0 ;
  assign inst_rowBuf_1$DEQ = inst_rowBuf_1$EMPTY_N ;
  assign inst_rowBuf_1$CLR = 1'b0 ;

  // submodule inst_rowBuf_2
  assign inst_rowBuf_2$D_IN = 16'h0 ;
  assign inst_rowBuf_2$ENQ = 1'b0 ;
  assign inst_rowBuf_2$DEQ = inst_rowBuf_2$EMPTY_N ;
  assign inst_rowBuf_2$CLR = 1'b0 ;

  // submodule inst_s_xactor_f_rd_addr
  assign inst_s_xactor_f_rd_addr$D_IN = 33'h0 ;
  assign inst_s_xactor_f_rd_addr$ENQ = 1'b0 ;
  assign inst_s_xactor_f_rd_addr$DEQ = 1'b0 ;
  assign inst_s_xactor_f_rd_addr$CLR = 1'b0 ;

  // submodule inst_s_xactor_f_rd_data
  assign inst_s_xactor_f_rd_data$D_IN = 23'h0 ;
  assign inst_s_xactor_f_rd_data$ENQ = 1'b0 ;
  assign inst_s_xactor_f_rd_data$DEQ = 1'b0 ;
  assign inst_s_xactor_f_rd_data$CLR = 1'b0 ;

  // submodule inst_s_xactor_f_wr_addr
  assign inst_s_xactor_f_wr_addr$D_IN = 33'h0 ;
  assign inst_s_xactor_f_wr_addr$ENQ = 1'b0 ;
  assign inst_s_xactor_f_wr_addr$DEQ = 1'b0 ;
  assign inst_s_xactor_f_wr_addr$CLR = 1'b0 ;

  // submodule inst_s_xactor_f_wr_data
  assign inst_s_xactor_f_wr_data$D_IN = 23'h0 ;
  assign inst_s_xactor_f_wr_data$ENQ = 1'b0 ;
  assign inst_s_xactor_f_wr_data$DEQ = 1'b0 ;
  assign inst_s_xactor_f_wr_data$CLR = 1'b0 ;

  // submodule inst_s_xactor_f_wr_resp
  assign inst_s_xactor_f_wr_resp$D_IN = 6'h0 ;
  assign inst_s_xactor_f_wr_resp$ENQ = 1'b0 ;
  assign inst_s_xactor_f_wr_resp$DEQ = 1'b0 ;
  assign inst_s_xactor_f_wr_resp$CLR = 1'b0 ;
endmodule  // mksystolic3


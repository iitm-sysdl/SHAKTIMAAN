//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Sat May 26 17:55:10 IST 2018
//
//
// Ports:
// Name                         I/O  size props
// RDY_from_north_put             O     1 const
// RDY_from_west_put              O     1 const
// to_south_get                   O    19 reg
// RDY_to_south_get               O     1 const
// to_east_get                    O    17 reg
// RDY_to_east_get                O     1 const
// acc_output                     O    32 reg
// RDY_acc_output                 O     1 const
// row                            I     8 unused
// col                            I     8 unused
// CLK                            I     1 clock
// RST_N                          I     1 reset
// from_north_put                 I    19
// from_west_put                  I    17
// EN_from_north_put              I     1
// EN_from_west_put               I     1
// EN_to_south_get                I     1 unused
// EN_to_east_get                 I     1 unused
// EN_acc_output                  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkintMul(row,
		col,
		CLK,
		RST_N,

		from_north_put,
		EN_from_north_put,
		RDY_from_north_put,

		from_west_put,
		EN_from_west_put,
		RDY_from_west_put,

		EN_to_south_get,
		to_south_get,
		RDY_to_south_get,

		EN_to_east_get,
		to_east_get,
		RDY_to_east_get,

		EN_acc_output,
		acc_output,
		RDY_acc_output);
  input  [7 : 0] row;
  input  [7 : 0] col;
  input  CLK;
  input  RST_N;

  // action method from_north_put
  input  [18 : 0] from_north_put;
  input  EN_from_north_put;
  output RDY_from_north_put;

  // action method from_west_put
  input  [16 : 0] from_west_put;
  input  EN_from_west_put;
  output RDY_from_west_put;

  // actionvalue method to_south_get
  input  EN_to_south_get;
  output [18 : 0] to_south_get;
  output RDY_to_south_get;

  // actionvalue method to_east_get
  input  EN_to_east_get;
  output [16 : 0] to_east_get;
  output RDY_to_east_get;

  // actionvalue method acc_output
  input  EN_acc_output;
  output [31 : 0] acc_output;
  output RDY_acc_output;

  // signals for module outputs
  wire [31 : 0] acc_output;
  wire [18 : 0] to_south_get;
  wire [16 : 0] to_east_get;
  wire RDY_acc_output,
       RDY_from_north_put,
       RDY_from_west_put,
       RDY_to_east_get,
       RDY_to_south_get;

  // register rg_acc
  reg [31 : 0] rg_acc;
  wire [31 : 0] rg_acc$D_IN;
  wire rg_acc$EN;

  // register rg_north
  reg [18 : 0] rg_north;
  wire [18 : 0] rg_north$D_IN;
  wire rg_north$EN;

  // register rg_west
  reg [16 : 0] rg_west;
  wire [16 : 0] rg_west$D_IN;
  wire rg_west$EN;

  // rule scheduling signals
  wire WILL_FIRE_RL_mult_add_phase;

  // remaining internal signals
  reg [63 : 0] v__h8005;
  reg [31 : 0] x__h7106;
  reg [15 : 0] north_full__h284, west_full__h285;
  wire [31 : 0] IF_rg_north_BIT_17_0_XOR_rg_west_BIT_15_9_33_T_ETC___d263,
		IF_rg_north_BIT_17_0_XOR_rg_west_BIT_15_9_33_T_ETC___d270,
		_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d189,
		_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d192,
		_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d195,
		_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d198,
		_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d201,
		_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d204,
		_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d207,
		_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d210,
		_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d213,
		_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d216,
		_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d219,
		_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d222,
		_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d225,
		_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d228,
		_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d231;
  wire [15 : 0] IF_rg_north_BIT_9_0_XOR_rg_west_BIT_7_9_48_THE_ETC___d262,
		_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d167,
		_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d171,
		_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d174,
		_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d178,
		_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d181,
		_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d184,
		_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d100,
		_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d107,
		_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d114,
		_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d120,
		_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d123,
		_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d126,
		_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d129,
		_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d135,
		_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d138,
		_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d141,
		_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d144,
		_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d150,
		_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d153,
		_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d156,
		_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d159,
		_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d93,
		north_full___1__h320,
		north_full___1__h766,
		north_full___1__h900,
		west_full___1__h321,
		west_full___1__h767,
		west_full___1__h901;
  wire [7 : 0] _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d237,
	       _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d244,
	       _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d251,
	       _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d258,
	       north_lower__h763,
	       north_upper__h762,
	       west_lower__h765,
	       west_upper__h764;
  wire [3 : 0] rg_acc_BITS_11_TO_8__q2,
	       rg_acc_BITS_15_TO_12__q1,
	       rg_acc_BITS_3_TO_0__q4,
	       rg_acc_BITS_7_TO_4__q3;
  wire rg_north_BIT_17_0_XOR_rg_west_BIT_15_9___d233,
       rg_north_BIT_9_0_XOR_rg_west_BIT_7_9___d248;

  // action method from_north_put
  assign RDY_from_north_put = 1'd1 ;

  // action method from_west_put
  assign RDY_from_west_put = 1'd1 ;

  // actionvalue method to_south_get
  assign to_south_get = rg_north ;
  assign RDY_to_south_get = 1'd1 ;

  // actionvalue method to_east_get
  assign to_east_get = rg_west ;
  assign RDY_to_east_get = 1'd1 ;

  // actionvalue method acc_output
  assign acc_output = rg_acc ;
  assign RDY_acc_output = 1'd1 ;

  // rule RL_mult_add_phase
  assign WILL_FIRE_RL_mult_add_phase =
	     rg_north[18] && rg_west[16] && !EN_acc_output ;

  // register rg_acc
  assign rg_acc$D_IN = WILL_FIRE_RL_mult_add_phase ? x__h7106 : 32'd0 ;
  assign rg_acc$EN = WILL_FIRE_RL_mult_add_phase || EN_acc_output ;

  // register rg_north
  assign rg_north$D_IN = EN_from_north_put ? from_north_put : 19'd174762 ;
  assign rg_north$EN = WILL_FIRE_RL_mult_add_phase || EN_from_north_put ;

  // register rg_west
  assign rg_west$D_IN = EN_from_west_put ? from_west_put : 17'd43690 ;
  assign rg_west$EN = WILL_FIRE_RL_mult_add_phase || EN_from_west_put ;

  // remaining internal signals
  assign IF_rg_north_BIT_17_0_XOR_rg_west_BIT_15_9_33_T_ETC___d263 =
	     { rg_north_BIT_17_0_XOR_rg_west_BIT_15_9___d233 ?
		 ~_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d237 +
		 8'd1 :
		 _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d237,
	       (rg_north[13] ^ rg_west[11]) ?
		 ~_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d244 +
		 8'd1 :
		 _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d244,
	       IF_rg_north_BIT_9_0_XOR_rg_west_BIT_7_9_48_THE_ETC___d262 } ;
  assign IF_rg_north_BIT_17_0_XOR_rg_west_BIT_15_9_33_T_ETC___d270 =
	     { rg_north_BIT_17_0_XOR_rg_west_BIT_15_9___d233 ?
		 ~_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d184 +
		 16'd1 :
		 _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d184,
	       rg_north_BIT_9_0_XOR_rg_west_BIT_7_9___d248 ?
		 ~_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d181 +
		 16'd1 :
		 _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d181 } ;
  assign IF_rg_north_BIT_9_0_XOR_rg_west_BIT_7_9_48_THE_ETC___d262 =
	     { rg_north_BIT_9_0_XOR_rg_west_BIT_7_9___d248 ?
		 ~_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d251 +
		 8'd1 :
		 _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d251,
	       (rg_north[5] ^ rg_west[3]) ?
		 ~_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d258 +
		 8'd1 :
		 _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d258 } ;
  assign _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d167 =
	     { 8'd0,
	       _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d93[7:0] } +
	     { 4'd0,
	       _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d100[7:0],
	       4'd0 } ;
  assign _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d171 =
	     { 8'd0,
	       _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d141[7:0] } +
	     { 4'd0,
	       _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d144[7:0],
	       4'd0 } ;
  assign _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d174 =
	     _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d167 +
	     { 4'd0,
	       _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d120[7:0],
	       4'd0 } ;
  assign _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d178 =
	     _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d171 +
	     { 4'd0,
	       _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d156[7:0],
	       4'd0 } ;
  assign _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d181 =
	     _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d174 +
	     { _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d123[7:0],
	       8'd0 } ;
  assign _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d184 =
	     _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d178 +
	     { _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d159[7:0],
	       8'd0 } ;
  assign _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d189 =
	     { 24'd0,
	       _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d93[7:0] } +
	     { 20'd0,
	       _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d100[7:0],
	       4'd0 } ;
  assign _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d192 =
	     _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d189 +
	     { 16'd0,
	       _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d107[7:0],
	       8'd0 } ;
  assign _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d195 =
	     _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d192 +
	     { 12'd0,
	       _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d114[7:0],
	       12'd0 } ;
  assign _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d198 =
	     _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d195 +
	     { 20'd0,
	       _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d120[7:0],
	       4'd0 } ;
  assign _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d201 =
	     _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d198 +
	     { 16'd0,
	       _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d123[7:0],
	       8'd0 } ;
  assign _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d204 =
	     _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d201 +
	     { 12'd0,
	       _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d126[7:0],
	       12'd0 } ;
  assign _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d207 =
	     _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d204 +
	     { 8'd0,
	       _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d129[7:0],
	       16'd0 } ;
  assign _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d210 =
	     _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d207 +
	     { 16'd0,
	       _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d135[7:0],
	       8'd0 } ;
  assign _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d213 =
	     _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d210 +
	     { 12'd0,
	       _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d138[7:0],
	       12'd0 } ;
  assign _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d216 =
	     _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d213 +
	     { 8'd0,
	       _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d141[7:0],
	       16'd0 } ;
  assign _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d219 =
	     _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d216 +
	     { 4'd0,
	       _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d144[7:0],
	       20'd0 } ;
  assign _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d222 =
	     _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d219 +
	     { 12'd0,
	       _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d150[7:0],
	       12'd0 } ;
  assign _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d225 =
	     _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d222 +
	     { 8'd0,
	       _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d153[7:0],
	       16'd0 } ;
  assign _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d228 =
	     _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d225 +
	     { 4'd0,
	       _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d156[7:0],
	       20'd0 } ;
  assign _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d231 =
	     _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d228 +
	     { _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d159[7:0],
	       24'd0 } ;
  assign _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d100 =
	     { 4'd0, west_full__h285[3:0] } *
	     { 4'd0, north_full__h284[7:4] } ;
  assign _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d107 =
	     { 4'd0, west_full__h285[3:0] } *
	     { 4'd0, north_full__h284[11:8] } ;
  assign _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d114 =
	     { 4'd0, west_full__h285[3:0] } *
	     { 4'd0, north_full__h284[15:12] } ;
  assign _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d120 =
	     { 4'd0, west_full__h285[7:4] } *
	     { 4'd0, north_full__h284[3:0] } ;
  assign _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d123 =
	     { 4'd0, west_full__h285[7:4] } *
	     { 4'd0, north_full__h284[7:4] } ;
  assign _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d126 =
	     { 4'd0, west_full__h285[7:4] } *
	     { 4'd0, north_full__h284[11:8] } ;
  assign _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d129 =
	     { 4'd0, west_full__h285[7:4] } *
	     { 4'd0, north_full__h284[15:12] } ;
  assign _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d135 =
	     { 4'd0, west_full__h285[11:8] } *
	     { 4'd0, north_full__h284[3:0] } ;
  assign _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d138 =
	     { 4'd0, west_full__h285[11:8] } *
	     { 4'd0, north_full__h284[7:4] } ;
  assign _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d141 =
	     { 4'd0, west_full__h285[11:8] } *
	     { 4'd0, north_full__h284[11:8] } ;
  assign _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d144 =
	     { 4'd0, west_full__h285[11:8] } *
	     { 4'd0, north_full__h284[15:12] } ;
  assign _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d150 =
	     { 4'd0, west_full__h285[15:12] } *
	     { 4'd0, north_full__h284[3:0] } ;
  assign _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d153 =
	     { 4'd0, west_full__h285[15:12] } *
	     { 4'd0, north_full__h284[7:4] } ;
  assign _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d156 =
	     { 4'd0, west_full__h285[15:12] } *
	     { 4'd0, north_full__h284[11:8] } ;
  assign _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d159 =
	     { 4'd0, west_full__h285[15:12] } *
	     { 4'd0, north_full__h284[15:12] } ;
  assign _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d237 =
	     _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d159[7:0] +
	     { {4{rg_acc_BITS_15_TO_12__q1[3]}}, rg_acc_BITS_15_TO_12__q1 } ;
  assign _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d244 =
	     _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d141[7:0] +
	     { {4{rg_acc_BITS_11_TO_8__q2[3]}}, rg_acc_BITS_11_TO_8__q2 } ;
  assign _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d251 =
	     _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d123[7:0] +
	     { {4{rg_acc_BITS_7_TO_4__q3[3]}}, rg_acc_BITS_7_TO_4__q3 } ;
  assign _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d258 =
	     _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d93[7:0] +
	     { {4{rg_acc_BITS_3_TO_0__q4[3]}}, rg_acc_BITS_3_TO_0__q4 } ;
  assign _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d93 =
	     { 4'd0, west_full__h285[3:0] } *
	     { 4'd0, north_full__h284[3:0] } ;
  assign north_full___1__h320 =
	     { rg_north[17] ? ~rg_north[17:14] + 4'd1 : rg_north[17:14],
	       rg_north[13] ? ~rg_north[13:10] + 4'd1 : rg_north[13:10],
	       rg_north[9] ? ~rg_north[9:6] + 4'd1 : rg_north[9:6],
	       rg_north[5] ? ~rg_north[5:2] + 4'd1 : rg_north[5:2] } ;
  assign north_full___1__h766 = { north_upper__h762, north_lower__h763 } ;
  assign north_full___1__h900 =
	     rg_north[17] ? ~rg_north[17:2] + 16'd1 : rg_north[17:2] ;
  assign north_lower__h763 =
	     rg_north[9] ? ~rg_north[9:2] + 8'd1 : rg_north[9:2] ;
  assign north_upper__h762 =
	     rg_north[17] ? ~rg_north[17:10] + 8'd1 : rg_north[17:10] ;
  assign rg_acc_BITS_11_TO_8__q2 = rg_acc[11:8] ;
  assign rg_acc_BITS_15_TO_12__q1 = rg_acc[15:12] ;
  assign rg_acc_BITS_3_TO_0__q4 = rg_acc[3:0] ;
  assign rg_acc_BITS_7_TO_4__q3 = rg_acc[7:4] ;
  assign rg_north_BIT_17_0_XOR_rg_west_BIT_15_9___d233 =
	     rg_north[17] ^ rg_west[15] ;
  assign rg_north_BIT_9_0_XOR_rg_west_BIT_7_9___d248 =
	     rg_north[9] ^ rg_west[7] ;
  assign west_full___1__h321 =
	     { rg_west[15] ? ~rg_west[15:12] + 4'd1 : rg_west[15:12],
	       rg_west[11] ? ~rg_west[11:8] + 4'd1 : rg_west[11:8],
	       rg_west[7] ? ~rg_west[7:4] + 4'd1 : rg_west[7:4],
	       rg_west[3] ? ~rg_west[3:0] + 4'd1 : rg_west[3:0] } ;
  assign west_full___1__h767 = { west_upper__h764, west_lower__h765 } ;
  assign west_full___1__h901 =
	     rg_west[15] ? ~rg_west[15:0] + 16'd1 : rg_west[15:0] ;
  assign west_lower__h765 = rg_west[7] ? ~rg_west[7:0] + 8'd1 : rg_west[7:0] ;
  assign west_upper__h764 =
	     rg_west[15] ? ~rg_west[15:8] + 8'd1 : rg_west[15:8] ;
  always@(rg_north or
	  north_full___1__h320 or
	  north_full___1__h766 or north_full___1__h900)
  begin
    case (rg_north[1:0])
      2'b0: north_full__h284 = north_full___1__h320;
      2'b01: north_full__h284 = north_full___1__h766;
      2'b10: north_full__h284 = north_full___1__h900;
      2'd3: north_full__h284 = rg_north[17:2];
    endcase
  end
  always@(rg_north or
	  rg_west or
	  west_full___1__h321 or west_full___1__h767 or west_full___1__h901)
  begin
    case (rg_north[1:0])
      2'b0: west_full__h285 = west_full___1__h321;
      2'b01: west_full__h285 = west_full___1__h767;
      2'b10: west_full__h285 = west_full___1__h901;
      2'd3: west_full__h285 = rg_west[15:0];
    endcase
  end
  always@(rg_north or
	  rg_north_BIT_17_0_XOR_rg_west_BIT_15_9___d233 or
	  _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d231 or
	  IF_rg_north_BIT_17_0_XOR_rg_west_BIT_15_9_33_T_ETC___d263 or
	  IF_rg_north_BIT_17_0_XOR_rg_west_BIT_15_9_33_T_ETC___d270)
  begin
    case (rg_north[1:0])
      2'b0:
	  x__h7106 =
	      IF_rg_north_BIT_17_0_XOR_rg_west_BIT_15_9_33_T_ETC___d263;
      2'b01:
	  x__h7106 =
	      IF_rg_north_BIT_17_0_XOR_rg_west_BIT_15_9_33_T_ETC___d270;
      default: x__h7106 =
		   rg_north_BIT_17_0_XOR_rg_west_BIT_15_9___d233 ?
		     ~_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d231 +
		     32'd1 :
		     _0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d231;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_acc <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_north <= `BSV_ASSIGNMENT_DELAY 19'd174762;
	rg_west <= `BSV_ASSIGNMENT_DELAY 17'd43690;
      end
    else
      begin
        if (rg_acc$EN) rg_acc <= `BSV_ASSIGNMENT_DELAY rg_acc$D_IN;
	if (rg_north$EN) rg_north <= `BSV_ASSIGNMENT_DELAY rg_north$D_IN;
	if (rg_west$EN) rg_west <= `BSV_ASSIGNMENT_DELAY rg_west$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_acc = 32'hAAAAAAAA;
    rg_north = 19'h2AAAA;
    rg_west = 17'h0AAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display("\t North : %b \n \t West: %b \n",
		 rg_north[17:2],
		 rg_west[15:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display("\t north: %b west: %b north_full: %b west_full:%b",
		 rg_north[17:2],
		 rg_west[15:0],
		 north_full__h284,
		 west_full__h285);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display(" vec_west[%d]: %b vec_north[%d]: %b Product %b",
		 $signed(32'd0),
		 $signed(west_full__h285[3:0]),
		 $signed(32'd0),
		 $signed(north_full__h284[3:0]),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d93[7:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display(" vec_west[%d]: %b vec_north[%d]: %b Product %b",
		 $signed(32'd0),
		 $signed(west_full__h285[3:0]),
		 $signed(32'd1),
		 $signed(north_full__h284[7:4]),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d100[7:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display(" vec_west[%d]: %b vec_north[%d]: %b Product %b",
		 $signed(32'd0),
		 $signed(west_full__h285[3:0]),
		 $signed(32'd2),
		 $signed(north_full__h284[11:8]),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d107[7:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display(" vec_west[%d]: %b vec_north[%d]: %b Product %b",
		 $signed(32'd0),
		 $signed(west_full__h285[3:0]),
		 $signed(32'd3),
		 $signed(north_full__h284[15:12]),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d114[7:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display(" vec_west[%d]: %b vec_north[%d]: %b Product %b",
		 $signed(32'd1),
		 $signed(west_full__h285[7:4]),
		 $signed(32'd0),
		 $signed(north_full__h284[3:0]),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d120[7:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display(" vec_west[%d]: %b vec_north[%d]: %b Product %b",
		 $signed(32'd1),
		 $signed(west_full__h285[7:4]),
		 $signed(32'd1),
		 $signed(north_full__h284[7:4]),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d123[7:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display(" vec_west[%d]: %b vec_north[%d]: %b Product %b",
		 $signed(32'd1),
		 $signed(west_full__h285[7:4]),
		 $signed(32'd2),
		 $signed(north_full__h284[11:8]),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d126[7:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display(" vec_west[%d]: %b vec_north[%d]: %b Product %b",
		 $signed(32'd1),
		 $signed(west_full__h285[7:4]),
		 $signed(32'd3),
		 $signed(north_full__h284[15:12]),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d129[7:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display(" vec_west[%d]: %b vec_north[%d]: %b Product %b",
		 $signed(32'd2),
		 $signed(west_full__h285[11:8]),
		 $signed(32'd0),
		 $signed(north_full__h284[3:0]),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d135[7:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display(" vec_west[%d]: %b vec_north[%d]: %b Product %b",
		 $signed(32'd2),
		 $signed(west_full__h285[11:8]),
		 $signed(32'd1),
		 $signed(north_full__h284[7:4]),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d138[7:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display(" vec_west[%d]: %b vec_north[%d]: %b Product %b",
		 $signed(32'd2),
		 $signed(west_full__h285[11:8]),
		 $signed(32'd2),
		 $signed(north_full__h284[11:8]),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d141[7:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display(" vec_west[%d]: %b vec_north[%d]: %b Product %b",
		 $signed(32'd2),
		 $signed(west_full__h285[11:8]),
		 $signed(32'd3),
		 $signed(north_full__h284[15:12]),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d144[7:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display(" vec_west[%d]: %b vec_north[%d]: %b Product %b",
		 $signed(32'd3),
		 $signed(west_full__h285[15:12]),
		 $signed(32'd0),
		 $signed(north_full__h284[3:0]),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d150[7:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display(" vec_west[%d]: %b vec_north[%d]: %b Product %b",
		 $signed(32'd3),
		 $signed(west_full__h285[15:12]),
		 $signed(32'd1),
		 $signed(north_full__h284[7:4]),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d153[7:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display(" vec_west[%d]: %b vec_north[%d]: %b Product %b",
		 $signed(32'd3),
		 $signed(west_full__h285[15:12]),
		 $signed(32'd2),
		 $signed(north_full__h284[11:8]),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d156[7:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display(" vec_west[%d]: %b vec_north[%d]: %b Product %b",
		 $signed(32'd3),
		 $signed(west_full__h285[15:12]),
		 $signed(32'd3),
		 $signed(north_full__h284[15:12]),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d159[7:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display("\t p1: %b, p2: %b",
		 $signed({ 8'd0,
			   _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d93[7:0] }),
		 $signed({ 8'd0,
			   _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d141[7:0] }));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display("\t vec_partial[%d][%d] : %b vec_partial[%d][%d] : %b",
		 $signed(32'd0),
		 $signed(32'd0),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d93[7:0]),
		 $signed(32'd0),
		 $signed(32'd0),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d141[7:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display("\t p1: %b, p2: %b",
		 $signed(_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d167),
		 $signed(_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d171));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display("\t vec_partial[%d][%d] : %b vec_partial[%d][%d] : %b",
		 $signed(32'd0),
		 $signed(32'd1),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d100[7:0]),
		 $signed(32'd0),
		 $signed(32'd1),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d144[7:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display("\t p1: %b, p2: %b",
		 $signed(_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d174),
		 $signed(_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d178));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display("\t vec_partial[%d][%d] : %b vec_partial[%d][%d] : %b",
		 $signed(32'd1),
		 $signed(32'd0),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d120[7:0]),
		 $signed(32'd1),
		 $signed(32'd0),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d156[7:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display("\t p1: %b, p2: %b",
		 $signed(_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d181),
		 $signed(_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d184));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display("\t vec_partial[%d][%d] : %b vec_partial[%d][%d] : %b",
		 $signed(32'd1),
		 $signed(32'd1),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d123[7:0]),
		 $signed(32'd1),
		 $signed(32'd1),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d159[7:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display("output_vector: %b vec_partial[i][j] %b",
		 $signed({ 24'd0,
			   _0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d93[7:0] }),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d93[7:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display("output_vector: %b vec_partial[i][j] %b",
		 $signed(_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d189),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d100[7:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display("output_vector: %b vec_partial[i][j] %b",
		 $signed(_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d192),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d107[7:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display("output_vector: %b vec_partial[i][j] %b",
		 $signed(_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d195),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d114[7:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display("output_vector: %b vec_partial[i][j] %b",
		 $signed(_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d198),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d120[7:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display("output_vector: %b vec_partial[i][j] %b",
		 $signed(_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d201),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d123[7:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display("output_vector: %b vec_partial[i][j] %b",
		 $signed(_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d204),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d126[7:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display("output_vector: %b vec_partial[i][j] %b",
		 $signed(_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d207),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d129[7:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display("output_vector: %b vec_partial[i][j] %b",
		 $signed(_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d210),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d135[7:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display("output_vector: %b vec_partial[i][j] %b",
		 $signed(_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d213),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d138[7:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display("output_vector: %b vec_partial[i][j] %b",
		 $signed(_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d216),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d141[7:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display("output_vector: %b vec_partial[i][j] %b",
		 $signed(_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d219),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d144[7:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display("output_vector: %b vec_partial[i][j] %b",
		 $signed(_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d222),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d150[7:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display("output_vector: %b vec_partial[i][j] %b",
		 $signed(_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d225),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d153[7:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display("output_vector: %b vec_partial[i][j] %b",
		 $signed(_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d228),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d156[7:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display("output_vector: %b vec_partial[i][j] %b",
		 $signed(_0_CONCAT_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0_ETC___d231),
		 $signed(_0_CONCAT_IF_rg_north_BITS_1_TO_0_EQ_0b0_THEN_I_ETC___d159[7:0]));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	begin
	  v__h8005 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mult_add_phase)
	$display(v__h8005, "\t The output is : %b", x__h7106);
  end
  // synopsys translate_on
endmodule  // mkintMul

